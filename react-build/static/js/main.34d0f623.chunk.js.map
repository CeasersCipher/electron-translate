{"version":3,"sources":["components/Translate.js","App.js","reportWebVitals.js","index.js"],"names":["Translate","useState","inputText","setInputText","resultText","setResultText","selectedLanguageKey","setLanguageKey","languagesList","setLanguagesList","detectLanguageKey","setdetectedLanguageKey","getLanguageSource","axios","post","q","then","response","data","language","useEffect","get","className","Form","Field","control","TextArea","placeholder","onChange","e","target","value","selectedLanguage","map","code","name","Button","color","size","onClick","source","translatedText","Icon","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RASe,SAASA,IAAa,IAAD,EACEC,mBAAS,IADX,mBACzBC,EADyB,KACdC,EADc,OAEIF,mBAAS,IAFb,mBAEzBG,EAFyB,KAEbC,EAFa,OAGcJ,mBAAS,IAHvB,mBAGzBK,EAHyB,KAGJC,EAHI,OAIUN,mBAAS,IAJnB,mBAIzBO,EAJyB,KAIVC,EAJU,OAKoBR,mBAAS,IAL7B,mBAKzBS,EALyB,KAKNC,EALM,KAM1BC,EAAoB,WACtBC,IAAMC,KAAN,mCAA+C,CAC3CC,EAAGb,IAENc,MAAK,SAACC,GACHN,EAAuBM,EAASC,KAAK,GAAGC,cA+BhD,OARAC,qBAAU,WACPP,IAAMQ,IAAN,uCACCL,MAAK,SAACC,GACNR,EAAiBQ,EAASC,SAG3BN,MACA,CAACV,IAEA,sBAAKoB,UAAU,WAAf,UACI,qBAAKA,UAAU,aAAf,SACI,oBAAIA,UAAU,SAAd,4BAGJ,qBAAKA,UAAU,WAAf,SACI,8BAEI,eAACC,EAAA,EAAD,WACA,qBAAKD,UAAU,cAAf,SACI,cAACC,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTC,YAAY,+BACZC,SAAU,SAACC,GAAD,OAAO1B,EAAa0B,EAAEC,OAAOC,YAI3C,yBAAQT,UAAU,kBAAkBM,SA9BpC,SAACI,GACjBzB,EAAeyB,EAAiBF,OAAOC,QA6BvB,UACI,6DACCvB,EAAcyB,KAAI,SAACd,GAChB,OACI,wBAAQY,MAAOZ,EAASe,KAAxB,SACKf,EAASgB,aAM1B,cAACZ,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTC,YAAY,+BACZI,MAAO3B,IAGX,eAACgC,EAAA,EAAD,CACIC,MAAM,OACNC,KAAK,QACLC,QAlEF,WAClBlC,EAAcH,GAEdU,IAEA,IAAIM,EAAO,CACPH,EAAIb,EACJsC,OAAQ9B,EACRoB,OAAQxB,GAEZO,IAAMC,KAAN,sCAAkDI,GACjDF,MAAK,SAACC,GACHZ,EAAcY,EAASC,KAAKuB,oBAmDhB,UAKI,cAACC,EAAA,EAAD,CAAMP,KAAK,cALf,yBC3ETQ,MARf,WACE,OACE,8BACE,cAAC3C,EAAD,OCMS4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.34d0f623.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Form,\n    TextArea,\n    Button,\n    Icon\n} from 'semantic-ui-react';\nimport axios from 'axios';\n\nexport default function Translate() {\n    const [inputText, setInputText] = useState('');\n    const [resultText, setResultText] = useState('');\n    const [selectedLanguageKey, setLanguageKey] = useState('')\n    const [languagesList, setLanguagesList] = useState([])\n    const [detectLanguageKey, setdetectedLanguageKey] = useState('')\n    const getLanguageSource = () => {\n        axios.post(`https://libretranslate.de/detect`, {\n            q: inputText\n        })\n        .then((response) => {\n            setdetectedLanguageKey(response.data[0].language)\n        })\n    }\n    const translateText = () => {\n        setResultText(inputText)\n\n        getLanguageSource();\n\n        let data = {\n            q : inputText,\n            source: detectLanguageKey,\n            target: selectedLanguageKey\n        }\n        axios.post(`https://libretranslate.de/translate`, data)\n        .then((response) => {\n            setResultText(response.data.translatedText)\n        })\n    }\n\n    const languageKey = (selectedLanguage) => {\n        setLanguageKey(selectedLanguage.target.value)\n    }\n\n    useEffect(() => {\n       axios.get(`https://libretranslate.de/languages`)\n       .then((response) => {\n        setLanguagesList(response.data)\n       })\n\n       getLanguageSource()\n    }, [inputText])\n    return (\n        <div className=\"body-app\">\n            <div className=\"app-header\">\n                <h2 className=\"header\">EZ-Translate</h2>\n            </div>\n\n            <div className='app-body'>\n                <div>\n                    \n                    <Form>\n                    <div className='form__group'>\n                        <Form.Field\n                            control={TextArea}\n                            placeholder='Type Some Text To Translate.'\n                            onChange={(e) => setInputText(e.target.value)}\n                        />\n                    </div>\n\n                        <select className=\"language-select\" onChange={languageKey}>\n                            <option>Please Select Language.</option>\n                            {languagesList.map((language) => {\n                                return (\n                                    <option value={language.code}>\n                                        {language.name}\n                                    </option>\n                                )\n                            })}\n                        </select>\n\n                        <Form.Field\n                            control={TextArea}\n                            placeholder='Your Resulting Translation..'\n                            value={resultText}\n                        />\n\n                        <Button \n                            color=\"#fff\" \n                            size=\"large\" \n                            onClick={translateText}\n                        >\n                            <Icon name='translate' />\n                            Translate</Button>\n                    </Form>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import './App.css';\nimport Translate from './components/Translate';\n\nfunction App() {\n  return (\n    <div>\n      <Translate/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}